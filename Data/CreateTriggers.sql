/*==============================================================*/
/*     		Action Prevention Triggers 	        	*/
/*	Actions that can never be done on specific tables	*/
/*==============================================================*/

/* Deleting LOGs, ACCOUNTLEVELs, POSITIONs, or LOANs */


CREATE TRIGGER noDelete_LOG
ON LOG
INSTEAD OF DELETE
AS
	BEGIN
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Deleting a locked value','LOG entries are permanent',GETDATE())
	RAISERROR ('Logs can not be deleted!',16,1);
END
GO

CREATE TRIGGER noDelete_POSITION
ON POSITION
INSTEAD OF DELETE
AS
	BEGIN
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Deleting a locked value','POSITION entries are permanent',GETDATE())
	RAISERROR ('Positions can not be deleted!',16,1);
END
GO

CREATE TRIGGER noDelete_ACCOUNTLEVEL
ON ACCOUNTLEVEL
INSTEAD OF DELETE
AS
	BEGIN
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Deleting a locked value','ACCOUNTLEVEL entries are permanent',GETDATE())
	RAISERROR ('Account Levels can not be deleted!',16,1);
END
GO

CREATE TRIGGER noDelete_LOAN
ON LOAN
INSTEAD OF DELETE
AS
	BEGIN
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Deleting a locked value','LOAN entries are permanent',GETDATE())
	RAISERROR ('Loans can not be deleted!',16,1);
END
GO

/*==============================================================*/
/* 			Foreign Key Triggers	                */
/*						                */
/*==============================================================*/

/*	EMPLOYEE.PosID		*/

CREATE TRIGGER fk_EMPLOYEE_POSID_INSERT
ON EMPLOYEE
AFTER INSERT
AS
IF (NOT EXISTS(
      SELECT P.POSID, i.POSID
      FROM POSITION AS P, inserted AS i
      WHERE P.POSID = i.POSID)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid PosID','Erorr on EMPLOYEE INSERT',GETDATE())
			RAISERROR ('Position does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted Employee','successful',GETDATE());
GO


CREATE TRIGGER fk_EMPLOYEE_POSID_UPDATE
ON EMPLOYEE
AFTER UPDATE
AS
IF (NOT EXISTS(
      SELECT P.POSID, i.POSID
      FROM POSITION AS P, inserted AS i
      WHERE P.POSID = i.POSID)) 
			BEGIN

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid PosID','Erorr on EMPLOYEE UPDATE',GETDATE())

			RAISERROR ('Position does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Updated Employee','successful',GETDATE());
GO






/*	ClientAccount.AID , .CID, and .EID	*/

CREATE TRIGGER fk_CLIENTACCOUNT_EID_INSERT_UPDATE
ON CLIENTACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT E.EID, i.EID
      FROM EMPLOYEE AS E, inserted AS i
      WHERE E.EID = i.EID)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid EID','Erorr on CLIENTACCOUNT creation',GETDATE())
			RAISERROR ('Employee does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted ClientAccount','successful',GETDATE());
GO

CREATE TRIGGER fk_CLIENTACCOUNT_AID_INSERT_UPDATE
ON CLIENTACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT A.PID10, i.PID10
      FROM ACCOUNT AS A, inserted AS i
      WHERE A.PID10 = i.PID10)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid Account ID','Erorr on CLIENTACCOUNT creation',GETDATE())
			RAISERROR ('Account does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted ClientAccount','successful',GETDATE());
GO

CREATE TRIGGER fk_CLIENTACCOUNT_CID_INSERT_UPDATE
ON CLIENTACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT C.CID, i.CID
      FROM CLIENT AS C, inserted AS i
      WHERE C.CID = i.CID)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid CID','Erorr on CLIENTACCOUNT creation',GETDATE())
			RAISERROR ('Client does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted ClientAccount','successful',GETDATE());
GO
/* 	If .AID or .CID are deleted then so is the CLIENTACCOUNT   */

CREATE TRIGGER fk_CLIENTACCOUNT_AID_DELETE
ON ACCOUNT
AFTER DELETE
AS

	DECLARE @AID int
	DECLARE CA CURSOR
	FOR
	SELECT C.PID10
	FROM CLIENTACCOUNT AS C, deleted
	WHERE C.PID10 = deleted.PID10

	OPEN CA
		FETCH NEXT FROM CA INTO @AID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			DELETE
			FROM CLIENTACCOUNT
			WHERE PID10 = @AID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Deleted ClientAccount due to deletion of Account '+ CAST(@AID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @AID
		END
	CLOSE CA
	DEALLOCATE CA
GO

CREATE TRIGGER fk_CLIENTACCOUNT_CID_DELETE
ON CLIENT
AFTER DELETE
AS

	DECLARE @CID int
	DECLARE CA CURSOR
	FOR
	SELECT C.PID10
	FROM CLIENTACCOUNT AS C, deleted
	WHERE C.CID = deleted.CID

	OPEN CA
		FETCH NEXT FROM CA INTO @CID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			DELETE
			FROM CLIENTACCOUNT
			WHERE CID = @CID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Deleted ClientAccount due to deletion of Client '+ CAST(@CID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @CID
		END
	CLOSE CA
	DEALLOCATE CA
GO
/* 	If .EID is deleted then they are replaced with a default employee   */

CREATE TRIGGER fk_CLIENTACCOUNT_EID_DELETE
ON EMPLOYEE
AFTER DELETE
AS

	DECLARE @EID int
	DECLARE CA CURSOR
	FOR
	SELECT C.EID
	FROM CLIENTACCOUNT AS C, deleted
	WHERE C.EID = deleted.EID

	OPEN CA
		FETCH NEXT FROM CA INTO @EID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			UPDATE CLIENTACCOUNT
			SET EID = 15
			WHERE EID = @EID

			UPDATE LOG
			SET EMP = 15
			WHERE EMP = @EID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Updated ClientAccount due to deletion of Employee '+ CAST(@EID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @EID
		END
	CLOSE CA
	DEALLOCATE CA
GO
/*	Prevent deletion of default employee	*/

CREATE TRIGGER fk_EMLOYEE_NoDelete_Emp0
ON EMPLOYEE
AFTER DELETE
AS
BEGIN
	DECLARE @EID int
	SET @EID = (SELECT EID from deleted)

	IF @EID = 1
		BEGIN
		ROLLBACK
		END
END
GO
/*	AID in Debit, Credit, Saving, Retirement acocunts 	*/

CREATE TRIGGER fk_DEBITACCOUNT_AID_INSERT_UPDATE
ON DEBITACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT A.PID10, i.PID10
      FROM ACCOUNT AS A, inserted AS i
      WHERE A.PID10 = i.PID10)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid AID','Error on DEBITACCOUNT creation',GETDATE())
			RAISERROR ('Account does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted DEBITACCOUNT','successful',GETDATE());
GO

CREATE TRIGGER fk_CREDITACCOUNT_AID_INSERT_UPDATE
ON CREDITACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT A.PID10, i.PID10
      FROM ACCOUNT AS A, inserted AS i
      WHERE A.PID10 = i.PID10)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid AID','Error on CREDITACCOUNT creation',GETDATE())
			RAISERROR ('Account does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted CREDITACCOUNT','successful',GETDATE());
GO

CREATE TRIGGER fk_SAVINGSACCOUNT_AID_INSERT_UPDATE
ON SAVINGSACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT A.PID10, i.PID10
      FROM ACCOUNT AS A, inserted AS i
      WHERE A.PID10 = i.PID10)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid AID','Error on SAVINGSACCOUNT creation',GETDATE())
			RAISERROR ('Account does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted SAVINGSACCOUNT','successful',GETDATE());
GO

CREATE TRIGGER fk_RETIREMENTACCOUNT_AID_INSERT_UPDATE
ON RETIREMENTACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT A.PID10, i.PID10
      FROM ACCOUNT AS A, inserted AS i
      WHERE A.PID10 = i.PID10)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid AID','Error on RETIREMENTACCOUNT creation',GETDATE())
			RAISERROR ('Account does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted RETIREMENTACCOUNT','successful',GETDATE());
GO


/* 	If a sub-account is deleted then so is the ACCOUNT	*/

CREATE TRIGGER fk_DEBITACCOUNT_AID_DELETE
ON DEBITACCOUNT
AFTER DELETE
AS

	DECLARE @AID int
	DECLARE CA CURSOR
	FOR
	SELECT A.PID10
	FROM ACCOUNT AS A, deleted
	WHERE A.PID10 = deleted.PID10

	OPEN CA
		FETCH NEXT FROM CA INTO @AID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			DELETE
			FROM ACCOUNT
			WHERE PID10 = @AID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Deleted Account due to deletion of DEBITACCOUNT '+ CAST(@AID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @AID
		END
	CLOSE CA
	DEALLOCATE CA
GO

CREATE TRIGGER fk_CREDITACCOUNT_AID_DELETE
ON CREDITACCOUNT
AFTER DELETE
AS

	DECLARE @AID int
	DECLARE CA CURSOR
	FOR
	SELECT A.PID10
	FROM ACCOUNT AS A, deleted
	WHERE A.PID10 = deleted.PID10

	OPEN CA
		FETCH NEXT FROM CA INTO @AID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			DELETE
			FROM ACCOUNT
			WHERE PID10 = @AID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Deleted Account due to deletion of CREDITACCOUNT '+ CAST(@AID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @AID
		END
	CLOSE CA
	DEALLOCATE CA
GO

CREATE TRIGGER fk_SAVINGSACCOUNT_AID_DELETE
ON SAVINGSACCOUNT
AFTER DELETE
AS

	DECLARE @AID int
	DECLARE CA CURSOR
	FOR
	SELECT A.PID10
	FROM ACCOUNT AS A, deleted
	WHERE A.PID10 = deleted.PID10

	OPEN CA
		FETCH NEXT FROM CA INTO @AID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			DELETE
			FROM ACCOUNT
			WHERE PID10 = @AID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Deleted Account due to deletion of SAVINGSACCOUNT '+ CAST(@AID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @AID
		END
	CLOSE CA
	DEALLOCATE CA
GO


/*	AID in Youth Account 	*/

CREATE TRIGGER fk_YOUTHACCOUNT_AID_INSERT_UPDATE
ON YOUTHACCOUNT
AFTER INSERT, UPDATE
AS
IF (NOT EXISTS(
      SELECT A.PID10, i.PID10
      FROM ACCOUNT AS A, inserted AS i
      WHERE A.PID10 = i.PID10)) 
			BEGIN
			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Invalid AID','Error on YOUTHACCOUNT creation',GETDATE())
			RAISERROR ('Account does not exist!',16,1);
		ROLLBACK TRANSACTION;
	RETURN
END
ELSE
	INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
	VALUES(SYSTEM_USER,'Inserted YOUTHACCOUNT','successful',GETDATE());
GO


/* 	If a YOUTHACCOUNT is deleted then so is the subsequent DEBITACCOUNT	*/

CREATE TRIGGER fk_YOUTHACCOUNT_AID_DELETE
ON YOUTHACCOUNT
AFTER DELETE
AS

	DECLARE @AID int
	DECLARE CA CURSOR
	FOR
	SELECT A.PID10
	FROM DEBITACCOUNT AS A, deleted
	WHERE A.PID10 = deleted.PID10

	OPEN CA
		FETCH NEXT FROM CA INTO @AID
		WHILE @@FETCH_STATUS = 0
		BEGIN
	
			DELETE
			FROM DEBITACCOUNT
			WHERE PID10 = @AID

			INSERT INTO LOG(EMP,TYPE,DETAILS,DATE)
			VALUES(SYSTEM_USER,'Deleted DEBITACCOUNT due to deletion of YOUTHACCOUNT '+ CAST(@AID AS varchar),'successful',GETDATE());
			FETCH NEXT FROM CA INTO @AID
		END
	CLOSE CA
	DEALLOCATE CA
GO
